<?php 
require_once(LIB_PATH.DS."database.php");

class Photograph extends DatabaseObject {
	
	protected static $table_name="Photographs";
	
	// db column vars
	public $id;
	public $filename;
	public $type;
	public $size;
	public $caption;
	
	// other vars
	private $temp_path;
	protected $upload_dir="images";
	public $errors = array();
	
  public $upload_errors = array(
	// http://www.php.net/manual/en/features.file-upload.errors.php
	UPLOAD_ERR_OK 				=> "No errors.",
	UPLOAD_ERR_INI_SIZE  	=> "Larger than upload_max_filesize.",
  UPLOAD_ERR_FORM_SIZE 	=> "Larger than form MAX_FILE_SIZE.",
  UPLOAD_ERR_PARTIAL 		=> "Partial upload.",
  UPLOAD_ERR_NO_FILE 		=> "No file.",
  UPLOAD_ERR_NO_TMP_DIR => "No temporary directory.",
  UPLOAD_ERR_CANT_WRITE => "Can't write to disk.",
  UPLOAD_ERR_EXTENSION 	=> "File upload stopped by extension."
  );
  
  // Pass in $_FILE(['uploaded_file']) as an argument
  public function attach_file($file) {
  	
  	// Performs error checking on the form parameters
  	if(!$file || empty($file) || !is_array($file)) {
  		
  		// error: nothing uploaded or wrong argument usage
  		$this->errors[] = "No file was uploaded.";
  		return false;
  	} elseif($file['error'] != UPLOAD_ERR_OK) {
  		
  		// error: report what PHP says went wrong 
  		$this->errors[] = $this->upload_errors[$file['error']];
  		return false;
  	} else {
	  	
	  	// Set object attributes to the form parameters
			$this->temp_path = $file['tmp_name'];
			$this->filename = basename($file['name']);
			$this->type = $file['type'];
			$this->size = $file['size'];
	  	// Don't worry about saving anything to the db as yet
	  	return true;
  	}
	}
	
	public function save() {

		if(isset($this->id)) {
			$this->update();
		} else {
			// Make sure there are no errors
			
			// 1. Can't save if there are pre-existing errors.
			if(!empty($this->errors)) { return false; }
			
			// 2. Make sure the caption is not longer than db limit of 255
			if(strlen($this->caption) > 255) {
				$this->errors[] = "The caption can only be 255 characters long.";
				return false;
			}
			
			// 3. Can't save without filename and temp location
			if(empty($this->filename) || empty($this->temp_path)) {
				$this->errors[] = "The file location was not available.";
				return false;
			}
			
			// 3a. Determine the target_path
			$target_path = SITE_ROOT.DS.'public'.DS.$this->upload_dir.DS.$this->filename;
			
			// 4. Make sure a file doesn't already exist in the target location 
			if(file_exists($target_path)) {
				$this->errors[] = "The file {$target_path} already exists.";
				return false;
			}
			
			
			// Attempt to move the file
			if(move_uploaded_file($this->temp_path, $target_path)) {
				// Success
				// Save a corresponding entry in the db.
				if ($this->create()) {
					// We are done with the temp_path, the file isn't there anymore
					unset($this->temp_path);
					return true;
				}
			} else {
				// File was not moved
				$this->errors[] = "The file upload failed, possibly due to incorrect permissions on the upload folder.";
				return false;
			}
		}
	}
	
	
	public function get_upload_dir() {
		return $this->upload_dir;
	}
	
	public function get_image_file() {
		return "..".DS.$this->upload_dir.DS.$this->filename;
	}
}

?>